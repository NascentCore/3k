syntax = "v1"

info (
	title:   "调度器服务"
	desc:    "调度器服务的接口定义"
	author:  "chenshu"
	date:    "2023 年 12 月 11 日"
	version: "v1"
)

import "client.api"

type (
	BaseReq {
		UserID string `header:"Sx-User-ID"`
	}
	BaseResp {
		Message string `json:"message"`
	}
)

type (
	Model {
		ModelId       string `json:"model_id"` // 模型ID
		ModelName     string `json:"model_name"` // 模型名字, owner/model
		ModelPath     string `json:"model_path,optional"` // 模型的绑定路径
		ModelSize     int64  `json:"model_size"` // 模型体积，单位字节
		ModelIsPublic bool   `json:"model_is_public"` // 是否公共模型
		ModelTemplate string `json:"model_template"` // 模型的推理模版
		ModelCategory string `json:"model_category"` // 模型分类
	}
	ModelOptional {
		ModelId       string `json:"model_id,optional"` // 模型ID
		ModelName     string `json:"model_name,optional"` // 模型名字, owner/model
		ModelPath     string `json:"model_path,optional"` // 模型的绑定路径
		ModelSize     int64  `json:"model_size,optional"` // 模型体积，单位字节
		ModelIsPublic bool   `json:"model_is_public,optional"` // 是否公共模型
		ModelTemplate string `json:"model_template,optional"` // 模型的推理模版
		ModelCategory string `json:"model_category,optional"` // 模型分类
	}
	Dataset {
		DatasetId       string `json:"dataset_id"` // 数据集ID
		DatasetName     string `json:"dataset_name"` // 数据集名字, owner/dataset
		DatasetPath     string `json:"dataset_path,optional"` // 数据集的绑定路径
		DatasetSize     int64  `json:"dataset_size"` // 数据集体积，单位字节
		DatasetIsPublic bool   `json:"dataset_is_public"` // 是否公共数据集
	}
	DatasetOptional {
		DatasetId       string `json:"dataset_id,optional"` // 数据集ID
		DatasetName     string `json:"dataset_name,optional"` // 数据集名字, owner/dataset
		DatasetPath     string `json:"dataset_path,optional"` // 数据集的绑定路径
		DatasetSize     int64  `json:"dataset_size,optional"` // 数据集体积，单位字节
		DatasetIsPublic bool   `json:"dataset_is_public,optional"` // 是否公共数据集
	}
	Adapter {
		AdapterId       string `json:"adapter_id"` // 适配器ID
		AdapterName     string `json:"adapter_name"` // 适配器名字, owner/adapter
		AdapterPath     string `json:"adapter_path,optional"` // 适配器的绑定路径
		AdapterSize     int64  `json:"adapter_size"` // 适配器体积，单位字节
		AdapterIsPublic bool   `json:"adapter_is_public"` // 是否公共适配器
	}
	AdapterOptional {
		AdapterId       string `json:"adapter_id,optional"` // 适配器ID
		AdapterName     string `json:"adapter_name,optional"` // 适配器名字, owner/adapter
		AdapterPath     string `json:"adapter_path,optional"` // 适配器的绑定路径
		AdapterSize     int64  `json:"adapter_size,optional"` // 适配器体积，单位字节
		AdapterIsPublic bool   `json:"adapter_is_public,optional"` // 是否公共适配器
	}
)

type (
	GPUInfo {
		CUDA    string `json:"cuda"`
		Prod    string `json:"prod"`
		Driver  string `json:"driver"`
		Vendor  string `json:"vendor"`
		MemSize int    `json:"mem_size"`
		Status  string `json:"status"`
	}
	CPUInfo {
		Cores int `json:"cores"`
		Used  int `json:"used"`
		Usage int `json:"usage"`
	}
	NetworkInfo {
		Throughput int    `json:"throughput"`
		Type       string `json:"type"`
	}
	DiskInfo {
		Size  int `json:"size"`
		Usage int `json:"usage"`
	}
	MemInfo {
		Size  int `json:"size"`
		Used  int `json:"used"`
		Usage int `json:"usage"`
	}
	NodeInfo {
		CPUInfo        CPUInfo     `json:"cpu_info"`
		LinuxDist      string      `json:"linux_dist"`
		GPUInfo        GPUInfo     `json:"gpu_info"`
		GPUTotal       int         `json:"gpu_total"`
		GPUAllocatable int         `json:"gpu_allocatable"`
		NetworkInfo    NetworkInfo `json:"network_info"`
		KernelVersion  string      `json:"kernel_version"`
		DiskInfo       DiskInfo    `json:"disk_info"`
		Name           string      `json:"name"`
		MemInfo        MemInfo     `json:"mem_info"`
		Arch           string      `json:"arch"`
		Status         string      `json:"status"`
	}
	GPUSummary {
		Allocatable int    `json:"allocatable"`
		Total       int    `json:"total"`
		Prod        string `json:"prod"`
		MemSize     int    `json:"mem_size"`
		Vendor      string `json:"vendor"`
	}
	ResourceInfo {
		GPUSummaries []GPUSummary `json:"gpu_summaries"`
		CPODVersion  string       `json:"cpod_version"`
		Nodes        []NodeInfo   `json:"nodes"`
		CPODID       string       `json:"cpod_id"`
		Caches       []Cache      `json:"caches"`
	}
)

type Cache {
	DataType          string `json:"data_type"`
	DataName          string `json:"data_name"`
	DataId            string `json:"data_id"`
	DataSize          int64  `json:"data_size"`
	Template          string `json:"template"`
	DataSource        string `json:"data_source"`
	IsPublic          bool   `json:"is_public"`
	UserID            string `json:"user_id"`
	FinetuneGPUCount  int64  `json:"finetune_gpu_count"`
	InferenceGPUCount int64  `json:"inference_gpu_count"`
}

type (
	JobStatus {
		JobStatus string `json:"job_status"`
		Name      string `json:"name"`
		Namespace string `json:"namespace"`
		JobType   string `json:"jobtype"`
	}
	InferenceStatus {
		ServiceName string `json:"service_name"`
		Status      string `json:"status"`
		URL         string `json:"url"`
	}
	JupyterlabStatus {
		JobName string `json:"job_name"`
		Status  string `json:"status"`
		URL     string `json:"url"`
	}
	CPODStatusReq {
		JobStatus        []JobStatus        `json:"job_status"`
		InferenceStatus  []InferenceStatus  `json:"inference_status"`
		JupyterlabStatus []JupyterlabStatus `json:"jupyter_status"`
		ResourceInfo     ResourceInfo       `json:"resource_info"`
		UpdateTime       string             `json:"update_time"`
		CPODID           string             `json:"cpod_id"`
		UserID           string             `header:"Sx-User-ID"`
	}
	CPODStatusResp {
		Message string `json:"message"`
	}
)

type (
	ModelUrlReq {
		DownloadUrls []string `json:"download_urls"`
		JobName      string   `json:"job_name"`
	}
	ModelUrlResp {
		Message string `json:"message"`
	}
)

type (
	GPUTypeReq  {}
	GPUTypeResp {
		Amount         float64 `json:"amount"`
		GPUProd        string  `json:"gpuProd"`
		GPUAllocatable int64   `json:"gpuAllocatable"`
	}
)

type (
	JobStatusReq {
		JobId string `json:"job_id"`
	}
	JobStatusResp {
		URL    string `json:"url"`
		Status string `json:"status"`
	}
)

type (
	JobStopReq {
		JobId string `json:"job_id"`
	}
	JobStopResp {
		Message string `json:"message"`
	}
)

type (
	JobCreateReq {
		GpuNumber        int64  `json:"gpuNumber"`
		GpuType          string `json:"gpuType"`
		CkptPath         string `json:"ckptPath"`
		CkptVol          int64  `json:"ckptVol"`
		CreatedModelPath string `json:"modelPath"`
		CreatedModelVol  int64  `json:"modelVol"`
		ImagePath        string `json:"imagePath"`
		JobType          string `json:"jobType"`
		StopType         int64  `json:"stopType,optional"`
		StopTime         int64  `json:"stopTime,optional"`
		ModelOptional
		DatasetOptional
		TrainedModelName string            `json:"trainedModelName,optional"`
		RunCommand       string            `json:"runCommand,optional"`
		CallbackUrl      string            `json:"callbackUrl,optional,omitempty"`
		Env              map[string]string `json:"env,optional,omitempty"`
		UserID           string            `header:"Sx-User-ID"`
	}
	JobCreateResp {
		JobId string `json:"job_id"`
	}
)

type (
	FinetuneReq {
		UserID string `header:"Sx-User-ID"`
		Model
		Dataset
		GpuModel         string                 `json:"gpu_model,optional"`
		GpuCount         int64                  `json:"gpu_count,optional"`
		TrainedModelName string                 `json:"trainedModelName,optional"`
		Hyperparameters  map[string]string      `json:"hyperparameters,optional,omitempty"`
		Config           map[string]interface{} `json:"config,optional,omitempty"`
		ModelSavedType   string                 `json:"model_saved_type"`
		FinetuneType     string                 `json:"finetune_type,optional"`
	}
	FinetuneResp {
		JobId string `json:"job_id"`
	}
)

type (
	Resource {
		ID                string   `json:"id"`
		Name              string   `json:"name"`
		Object            string   `json:"object"`
		Owner             string   `json:"owner"`
		Size              int64    `json:"size"`
		IsPublic          bool     `json:"is_public"`
		UserID            string   `json:"user_id"`
		Tag               []string `json:"tag"`
		Template          string   `json:"template"`
		Category          string   `json:"category"`
		BaseModel         string   `json:"base_model"`
		FinetuneGPUCount  int      `json:"finetune_gpu_count"`
		InferenceGPUCount int      `json:"inference_gpu_count"`
	}
	ResourceModelsReq {
		UserID string `header:"Sx-User-ID"`
	}
	ResourceDatasetsReq {
		UserID string `header:"Sx-User-ID"`
	}
	ResourceAdaptersReq {
		UserID string `header:"Sx-User-ID"`
	}
	ResourceListResp {
		PublicList []Resource `json:"public_list"`
		UserList   []Resource `json:"user_list"`
	}
)

type (
	UploaderAccessReq {
		UserID string `header:"Sx-User-ID"`
	}
	UploaderAccessResp {
		AccessID  string `json:"access_id"`
		AccessKey string `json:"access_key"`
		UserID    string `json:"user_id"`
		IsAdmin   bool   `json:"is_admin"`
	}
)

type (
	JobGetReq {
		Current int    `form:"current"`
		Size    int    `form:"size"`
		UserID  string `header:"Sx-User-ID"`
	}
	Job {
		CkptPath            string `json:"ckptPath"`
		CkptVol             string `json:"ckptVol"`
		CpodId              string `json:"cpodId"`
		CreateTime          string `json:"createTime"`
		DatasetName         string `json:"datasetName,omitempty"`
		DatasetPath         string `json:"datasetPath,omitempty"`
		Deleted             int    `json:"deleted"`
		GpuNumber           int    `json:"gpuNumber"`
		GpuType             string `json:"gpuType"`
		ImagePath           string `json:"imagePath"`
		JobId               int    `json:"jobId"`
		JobName             string `json:"jobName"`
		JobType             string `json:"jobType"`
		JsonAll             string `json:"jsonAll"`
		ModelPath           string `json:"modelPath"`
		ModelVol            string `json:"modelVol"`
		ObtainStatus        int    `json:"obtainStatus"`
		PretrainedModelName string `json:"pretrainedModelName,omitempty"`
		PretrainedModelPath string `json:"pretrainedModelPath,omitempty"`
		RunCommand          string `json:"runCommand,omitempty"`
		StopTime            int    `json:"stopTime"`
		StopType            int    `json:"stopType"`
		UpdateTime          string `json:"updateTime"`
		UserId              string `json:"userId"`
		WorkStatus          int    `json:"workStatus"`
		TensorURL           string `json:"tensor_url"`
	}
	JobGetResp {
		Content       []Job `json:"content"`
		TotalElements int64 `json:"totalElements"`
	}
)

type (
	SysInference {
		ServiceName string `json:"service_name"`
		Status      string `json:"status"`
		Model
		AdapterOptional
		Url       string `json:"url"`
		StartTime string `json:"start_time"` // 推理服务启动时间
		EndTime   string `json:"end_time"` // 推理服务终止时间
	}
	InferenceDeployReq {
		Model
		AdapterOptional
		GpuModel string `json:"gpu_model,optional"`
		GpuCount int64  `json:"gpu_count,optional"`
		UserID   string `header:"Sx-User-ID"`
	}
	InferenceDeployResp {
		ServiceName string `json:"service_name"`
	}
	InferenceInfoReq {
		ServiceName string `json:"service_name,optional"`
		UserID      string `header:"Sx-User-ID"`
	}
	InferenceInfoResp {
		Data []SysInference `json:"data"`
	}
	InferenceDeleteReq {
		ServiceName string `form:"service_name"`
		UserID      string `header:"Sx-User-ID"`
	}
	InferenceDeleteResp {
		Message string `json:"message"`
	}
)

type (
	InferenceService {
		ServiceName     string `json:"service_name"`
		Status          string `json:"status"`
		ModelName       string `json:"model_name"`
		ModelId         string `json:"model_id"`
		ModelSize       int64  `json:"model_size"`
		ModelIsPublic   bool   `json:"model_is_public"`
		ModelCategory   string `json:"model_category"`
		AdapterName     string `json:"adapter_name"`
		AdapterId       string `json:"adapter_id"`
		AdapterSize     int64  `json:"adapter_size"`
		AdapterIsPublic bool   `json:"adapter_is_public"`
		GpuType         string `json:"gpu_type"`
		GpuNumber       int64  `json:"gpu_number"`
		Template        string `json:"template"`
		CpodId          string `json:"cpod_id"`
		UserId          string `json:"user_id"`
	}
	JupyterLab {
		JobName        string          `json:"jobName"`
		InstanceName   string          `json:"instanceName"`
		CPUCount       string          `json:"cpuCount"`
		Memory         string          `json:"memory"`
		GPUCount       int             `json:"gpuCount"`
		GPUProduct     string          `json:"gpuProduct"`
		DataVolumeSize string          `json:"dataVolumeSize"`
		Resource       JupyterResource `json:"resource"`
		UserID         string          `json:"userId"`
		Replicas       int             `json:"replicas"`
	}
	CpodJobReq {
		CpodId string `form:"cpodid"`
	}
	CpodJobResp {
		JobList              []map[string]interface{} `json:"job_list"`
		InferenceServiceList []InferenceService       `json:"inference_service_list"`
		JupyterlabList       []JupyterLab             `json:"jupyter_lab_list"`
	}
)

type (
	ClusterNode {
		NodeRole    string `json:"node_role"`
		NodeName    string `json:"node_name"`
		NodeIP      string `json:"node_ip"`
		SSHPort     int    `json:"ssh_port"`
		SSHUser     string `json:"ssh_user"`
		SSHPassword string `json:"ssh_password"`
	}
	ClusterNodeInfo {
		GpuCount   int      `json:"gpu_count"`
		GpuProduct string   `json:"gpu_product"`
		Name       string   `json:"name"`
		Role       []string `json:"role"`
	}
	NodeAddReq {
		ClusterNode
	}
	NodeAddResp {
		Message string `json:"message"`
	}
	NodeListReq  {}
	NodeListResp {
		Data []ClusterNodeInfo `json:"data"`
	}
)

type (
	Quota {
		UserId   string `json:"user_id"`
		Resource string `json:"resource"`
		Quota    int64  `json:"quota"`
	}
	QuotaAddReq {
		Quota
		UserID string `header:"Sx-User-ID"`
	}
	QuotaAddResp {
		Message string `json:"message"`
	}
	QuotaResp {
		Id int64 `json:"id"`
		Quota
	}
	QuotaListReq {
		UserID string `header:"Sx-User-ID"`
		ToUser string `json:"user_id,optional"`
	}
	QuotaListResp {
		Data []QuotaResp `json:"data"`
	}
	QuotaUpdateReq {
		Id     int64  `json:"id"`
		Quota  int64  `json:"quota"`
		UserID string `header:"Sx-User-ID"`
	}
	QuotaUpdateResp {
		Message string `json:"message"`
	}
	QuotaDeleteReq {
		Id     int64  `json:"id"`
		UserID string `header:"Sx-User-ID"`
	}
	QuotaDeleteResp {
		Message string `json:"message"`
	}
)

type (
	User {
		UserID   string `json:"user_id"`
		UserName string `json:"user_name"`
	}
	UserListResp {
		Data []User `json:"data"`
	}
)

service scheduler-api {
	@handler CpodStatusHandler
	post /cpod/status (CPODStatusReq) returns (CPODStatusResp)

	@handler CpodJobHandler
	get /cpod/job (CpodJobReq) returns (CpodJobResp)

	@handler UploadStatusHandler
	post /info/upload_status (ModelUrlReq) returns (ModelUrlResp)

	@handler GpuTypeHandler
	get /cpod/gpu_type (GPUTypeReq) returns ([]GPUTypeResp)

	@handler JobStatusHandler
	post /job/status (JobStatusReq) returns (JobStatusResp)

	@handler JobStopHandler
	post /job/stop (JobStopReq) returns (JobStopResp)

	@handler JobCreateHandler
	post /job/job (JobCreateReq) returns (JobCreateResp)

	@handler JobGetHandler
	get /job/job (JobGetReq) returns (JobGetResp)

	@handler FinetuneHandler
	post /job/finetune (FinetuneReq) returns (FinetuneResp)

	@doc "模型列表"
	@handler ResourceModelsHandler
	get /api/resource/models (ResourceModelsReq) returns (ResourceListResp) // oss上存储的模型

	@doc "数据集列表"
	@handler ResourceDatasetsHandler
	get /api/resource/datasets (ResourceDatasetsReq) returns (ResourceListResp) // oss上存储的数据集

	@doc "适配器列表"
	@handler ResourceAdaptersHandler
	get /api/resource/adapters (ResourceAdaptersReq) returns (ResourceListResp) // oss上存储的适配器

	@handler UploaderAccessHandler
	get /resource/uploader_access (UploaderAccessReq) returns (UploaderAccessResp)

	@handler InferenceDeployHandler
	post /inference (InferenceDeployReq) returns (InferenceDeployResp)

	@handler InferenceInfoHandler
	get /inference (InferenceInfoReq) returns (InferenceInfoResp)

	@handler InferenceDeleteHandler
	delete /inference (InferenceDeleteReq) returns (InferenceDeleteResp)

	@handler NodeAddHandler
	post /node (NodeAddReq) returns (NodeAddResp)

	@handler NodeListHandler
	get /node (NodeListReq) returns (NodeListResp)

	@handler QuotaAddHandler
	post /quota (QuotaAddReq) returns (QuotaAddResp)

	@handler QuotaListHandler
	get /quota (QuotaListReq) returns (QuotaListResp)

	@handler QuotaUpdateHandler
	put /quota (QuotaUpdateReq) returns (QuotaUpdateResp)

	@handler QuotaDeleteHandler
	delete /quota (QuotaDeleteReq) returns (QuotaDeleteResp)

	@handler UserListHandler
	get /user returns (UserListResp)
}

type (
	UserInfo {
		CompanyID  string `json:"companyId"`
		CreateBy   string `json:"createBy"`
		CreateTime string `json:"createTime"`
		Email      string `json:"email"`
		Enabled    bool   `json:"enabled"`
		ID         int64  `json:"id"`
		UserID     string `json:"user_id"`
		IsAdmin    bool   `json:"isAdmin"`
		UpdateBy   string `json:"updateBy"`
		UpdateTime string `json:"updateTime"`
		UserType   int    `json:"userType"`
		Username   string `json:"username"`
	}
	UserInfoReq {
		UserID string `header:"Sx-User-ID"`
	}
	UserInfoResp {
		User UserInfo `json:"user"`
	}
	LoginReq {
		Username string `json:"username"`
		Password string `json:"password,optional"`
		Code     string `json:"code,optional"`
	}
	WrapUser {
		User UserInfo `json:"user"`
	}
	LoginResp {
		User  WrapUser `json:"user"` // TODO 去掉多余嵌套
		Token string   `json:"token"`
	}
)

@server (
	prefix: /auth
)
service scheduler-api {
	@handler userInfo
	get /info (UserInfoReq) returns (UserInfoResp)

	@handler userLogin
	post /login (LoginReq) returns (LoginResp)
}

type (
	SendEmailReq {
		Email string `form:"email"`
	}
	RegisterUserReq {
		Code         string `path:"code"`
		Username     string `json:"username"`
		Email        string `json:"email"`
		Enabled      int    `json:"enabled"`
		Password     string `json:"password"`
		From         string `json:"from,optional"`
		UserType     int    `json:"userType,optional"`
		CompanyName  string `json:"companyName,optional"`
		CompanyPhone string `json:"companyPhone,optional"`
	}
)

// /job/jupyterlab
type (
	JupyterResource {
		Models   []Model   `json:"models,optional"`
		Datasets []Dataset `json:"datasets,optional"`
		Adapters []Adapter `json:"adapters,optional"`
	}
	Jupyterlab {
		ID             int64           `json:"id,optional"`
		JobName        string          `json:"job_name,optional"`
		InstanceName   string          `json:"instance_name"`
		CPUCount       int64           `json:"cpu_count"`
		Memory         int64           `json:"memory"`
		GPUCount       int64           `json:"gpu_count,optional"`
		GPUProduct     string          `json:"gpu_product,optional"`
		DataVolumeSize int64           `json:"data_volume_size"`
		Resource       JupyterResource `json:"resource"`
		URL            string          `json:"url,optional"`
		UserId         string          `json:"user_id,optional"`
		Status         string          `json:"status,optional"`
	}
	JupyterlabCreateReq {
		Jupyterlab
		UserID string `header:"Sx-User-ID"`
	}
	JupyterlabCreateResp {
		Message string `json:"message"`
	}
	JupyterlabListReq {
		UserID string `header:"Sx-User-ID"`
	}
	JupyterlabListResp {
		Data []Jupyterlab `json:"data"`
	}
	JupyterlabDeleteReq {
		JobName string `json:"job_name"`
		UserID  string `header:"Sx-User-ID"`
	}
	JupyterlabDeleteResp {
		Message string `json:"message"`
	}
	JupyterlabUpdateReq {
		UserID         string `header:"Sx-User-ID"`
		JobName        string `json:"job_name"`
		CPUCount       int64  `json:"cpu_count"`
		Memory         int64  `json:"memory"`
		GPUCount       int64  `json:"gpu_count"`
		GPUProduct     string `json:"gpu_product"`
		DataVolumeSize int64  `json:"data_volume_size"`
	}
	JupyterlabPauseReq {
		JobName string `json:"job_name"`
		UserID  string `header:"Sx-User-ID"`
	}
	JupyterlabResumeReq {
		JobName string `json:"job_name"`
		UserID  string `header:"Sx-User-ID"`
	}
)

type (
	JupyterlabImage {
		CreatedAt string `json:"created_at"`
		FullName  string `json:"full_name"`
		ImageName string `json:"image_name"`
		UpdatedAt string `json:"updated_at"`
	}
	JupyterlabImageVersion {
		ImageName string `json:"image_name"`
		ImageSize int    `json:"image_size"`
		TagName   string `json:"tag_name"`
		FullName  string `json:"full_name"`
		PushTime  string `json:"push_time"`
	}
	JupyterlabImageCreateReq {
		UserID       string `header:"Sx-User-ID"`
		BaseImage    string `json:"base_image"`
		InstanceName string `json:"instance_name"`
		JobName      string `json:"job_name"`
	}
	JupyterlabImageCreateResp {
		Message string `json:"message"`
	}
	JupyterlabImageDelReq {
		UserID    string `header:"Sx-User-ID"`
		ImageName string `json:"image_name"`
		TagName   string `json:"tag_name,optional"`
	}
	JupyterlabImageDelResp {
		Message string `json:"message"`
	}
	JupyterlabImageListReq {
		UserID string `header:"Sx-User-ID"`
	}
	JupyterlabImageListResp {
		Data []JupyterlabImage `json:"data"`
	}
	JupyterlabImageVersionListReq {
		UserID       string `header:"Sx-User-ID"`
		InstanceName string `form:"instance_name"`
	}
	JupyterlabImageVersionListResp {
		Data []JupyterlabImageVersion `json:"data"`
	}
)

// 终止任务
type (
	JobsDelReq {
		UserID string `header:"Sx-User-ID"`
		ToUser string `json:"user_id"`
	}
	JobsDelResp {
		Message string `json:"message"`
	}
)

// 计费
type (
	BalanceAddReq {
		UserID string  `header:"Sx-User-ID"`
		ToUser string  `json:"user_id"`
		Amount float64 `json:"amount"`
	}
	BalanceAddResp {
		Message string `json:"message"`
	}
	BalanceGetReq {
		UserID string `header:"Sx-User-ID"`
		ToUser string `form:"user_id"`
	}
	BalanceGetResp {
		UserID  string  `json:"user_id"`
		Balance float64 `json:"balance"`
	}
	UserBilling {
		BillingId     string  `json:"billing_id"` // 账单ID
		UserId        string  `json:"user_id"` // 用户ID
		Amount        float64 `json:"amount"` // 消费金额
		BillingStatus int64   `json:"billing_status"` // 账单状态（0 未支付、1 已支付、2 欠费） TODO 返回字符串
		JobId         string  `json:"job_id"` // 关联任务id
		JobType       string  `json:"job_type"` // 关联任务类型（例如：finetune、inference）
		BillingTime   string  `json:"billing_time"` // 账单生成时间
		PaymentTime   string  `json:"payment_time"` // 支付时间
		Description   string  `json:"description"` // 账单描述（可选，详细说明此次费用的具体内容）
	}
	BillingListReq {
		UserID    string `header:"Sx-User-ID"`
		ToUser    string `form:"user_id,optional"`
		StartTime string `form:"start_time,optional"`
		EndTime   string `form:"end_time,optional"`
		JobID     string `form:"job_id,optional"`
	}
	BillingListResp {
		Data []UserBilling `json:"data"`
	}
	UserRecharge {
		Id            int64   `json:"id"` // ID
		RechargeId    string  `json:"recharge_id"` // 充值记录id
		UserId        string  `json:"user_id"` // 用户ID
		Amount        float64 `json:"amount"` // 充值金额
		BeforeBalance float64 `json:"before_balance"` // 充值前余额
		AfterBalance  float64 `json:"after_balance"` // 充值后余额
		Description   string  `json:"description"` // 描述
		CreatedAt     string  `json:"created_at"` // 创建时间
		UpdatedAt     string  `json:"updated_at"` // 更新时间
	}
	RechargeListReq {
		UserID   string `header:"Sx-User-ID"`
		ToUser   string `form:"user_id,optional"`
		Page     int64  `form:"page"`
		PageSize int64  `form:"page_size"`
	}
	RechargeListResp {
		total int64          `json:"total"`
		Data  []UserRecharge `json:"data"`
	}
	TaskBilling {
		UserId    string  `json:"user_id"` // 用户ID
		JobId     string  `json:"job_id"` // 关联任务id
		JobType   string  `json:"job_type"` // 关联任务类型（例如：finetune、inference）
		Amount    float64 `json:"amount"` // 消费金额
		StartTime string  `json:"begin_time"`
		EndTime   string  `json:"end_time"`
	}
	BillingTasksReq {
		SxUserID string `header:"Sx-User-ID"`
		UserID   string `form:"user_id"`
		Page     int64  `form:"page"`
		PageSize int64  `form:"page_size"`
	}
	BillingTasksResp {
		Data  []TaskBilling `json:"data"`
		Total int64         `json:"total"`
	}
)

// 资源管理
type (
	ResourceMetaAddReq {
		BaseReq
		ResourceID   string `json:"resource_id"`
		ResourceType string `json:"resource_type"`
		ResourceName string `json:"resource_name"`
		ResourceSize int64  `json:"resource_size"`
		IsPublic     bool   `json:"is_public"`
		UserId       string `json:"user_id"`
		Meta         string `json:"meta,optional"`
	}
	ResourceMetaDelReq {
		BaseReq
		ResourceID string `json:"resource_id"`
	}
)

// python接口参数定义
type (
	BuildImageReq {
		BaseImage    string `json:"base_image"`
		UserID       string `json:"user_id"`
		InstanceName string `json:"instance_name"`
		JobName      string `json:"job_name"`
	}
	ImageDelReq {
		UserID    string `json:"user_id"`
		ImageName string `json:"image_name"`
		Tag       string `json:"tag"`
	}
)

type (
	BaseImageListReq {
		UserID string `header:"Sx-User-ID"`
	}
	BaseImageListResp {
		Data []string `json:"data"`
	}
)

// TODO remove
type CreateNewUserIDResp {
	Message string `json:"message"`
}

type (
	CpodInfo {
		CpodID         string `json:"cpod_id"`
		CpodVersion    string `json:"cpod_version"`
		GPUVendor      string `json:"gpu_vendor"`
		GPUProd        string `json:"gpu_prod"`
		GPUMem         int64  `json:"gpu_mem"`
		GPUTotal       int64  `json:"gpu_total"`
		GPUAllocatable int64  `json:"gpu_allocatable"`
		CreateTime     string `json:"create_time"`
		UpdateTime     string `json:"update_time"`
	}
	ClusterCpodsResp {
		Data []CpodInfo `json:"data"`
	}
)

type (
	DingCallbackReq {
		Code string `form:"code"`
	}
)

@server (
	prefix: /api
)
service scheduler-api {
	@doc "发送邮件验证码"
	@handler sendEmail
	post /code/sendEmail (SendEmailReq)

	@doc "用户注册"
	@handler register
	post /user/register/:code (RegisterUserReq)

	@doc "创建jupyterlab实例"
	@handler jupyterlabCreate
	post /job/jupyterlab (JupyterlabCreateReq) returns (JupyterlabCreateResp)

	@doc "查询jupyterlab实例列表"
	@handler jupyterlabList
	get /job/jupyterlab (JupyterlabListReq) returns (JupyterlabListResp)

	@doc "删除jupyterlab实例"
	@handler jupyterlabDel
	delete /job/jupyterlab (JupyterlabDeleteReq) returns (JupyterlabDeleteResp)

	@doc "更新jupyterlab实例"
	@handler jupyterlabUpdate
	put /job/jupyterlab (JupyterlabUpdateReq) returns (BaseResp)

	@doc "暂停jupyterlab实例"
	@handler jupyterlabPause
	post /job/jupyterlab/pause (JupyterlabPauseReq) returns (BaseResp)

	@doc "恢复jupyterlab实例"
	@handler jupyterlabResume
	post /job/jupyterlab/resume (JupyterlabResumeReq) returns (BaseResp)

	@doc "构建镜像"
	@handler jupyterlabImageCreate
	post /job/jupyter/image (JupyterlabImageCreateReq) returns (JupyterlabImageCreateResp)

	@doc "镜像列表"
	@handler jupyterlabImageList
	get /job/jupyter/image (JupyterlabImageListReq) returns (JupyterlabImageListResp)

	@doc "镜像版本列表"
	@handler jupyterlabImageVersionList
	get /job/jupyter/imageversion (JupyterlabImageVersionListReq) returns (JupyterlabImageVersionListResp)

	@doc "删除镜像"
	@handler jupyterlabImageDel
	delete /job/jupyter/image (JupyterlabImageDelReq) returns (JupyterlabImageDelResp)

	@doc "终止用户所有任务"
	@handler jobsDel
	delete /job/jobs (JobsDelReq) returns (JobsDelResp)

	@doc "基础镜像列表"
	@handler baseImageList
	get /resource/baseimages (BaseImageListReq) returns (BaseImageListResp)

	@doc "oss资源同步"
	@handler OssSync
	post /resource/sync (BaseReq) returns (BaseResp)

	@doc "新增数据资产信息"
	@handler ResourceMetaAdd
	post /resource/meta (ResourceMetaAddReq) returns (BaseResp)

	@doc "删除数据资产信息"
	@handler ResourceMetaDel
	delete /resource/meta (ResourceMetaDelReq) returns (BaseResp)

	@doc "余额充值"
	@handler BalanceAdd
	post /pay/balance (BalanceAddReq) returns (BalanceAddResp)

	@doc "余额查询"
	@handler BalanceGet
	get /pay/balance (BalanceGetReq) returns (BalanceGetResp)

	@doc "账单明细"
	@handler BillingList
	get /pay/billing (BillingListReq) returns (BillingListResp)

	@doc "聚合账单"
	@handler BillingTasks
	get /pay/billing/tasks (BillingTasksReq) returns (BillingTasksResp)

	@doc "充值记录"
	@handler RechargeList
	get /pay/recharge (RechargeListReq) returns (RechargeListResp)

	@doc "生成所有user_id"
	@handler CreateNewUserID
	post /user/newuserid returns (CreateNewUserIDResp)

	@doc "集群列表"
	@handler ClusterCpods
	get /cluster/cpods (BaseReq) returns (ClusterCpodsResp)

	@doc "钉钉回调"
	@handler DingtalkCallback
	get /dingtalk/callback (DingCallbackReq)

	@doc "钉钉用户信息"
	@handler DingtalkUserinfo
	get /dingtalk/userinfo (DingCallbackReq) returns (LoginResp)
}

