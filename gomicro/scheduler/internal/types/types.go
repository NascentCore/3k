// Code generated by goctl. DO NOT EDIT.
package types

type GPUStateInfo struct {
	Temp      int    `json:"temp"`
	MemUsage  int    `json:"mem_usage"`
	GPUUsage  int    `json:"gpu_usage"`
	Power     int    `json:"power"`
	Status    string `json:"status"`
	Allocated bool   `json:"allocated"`
}

type GPUInfo struct {
	CUDA    string `json:"cuda"`
	Prod    string `json:"prod"`
	Driver  string `json:"driver"`
	Vendor  string `json:"vendor"`
	MemSize int    `json:"mem_size"`
	Status  string `json:"status"`
}

type CPUInfo struct {
	Cores int `json:"cores"`
	Usage int `json:"usage"`
}

type NetworkInfo struct {
	Throughput int    `json:"throughput"`
	Type       string `json:"type"`
}

type DiskInfo struct {
	Size  int `json:"size"`
	Usage int `json:"usage"`
}

type MemInfo struct {
	Size  int `json:"size"`
	Usage int `json:"usage"`
}

type NodeInfo struct {
	CPUInfo        CPUInfo        `json:"cpu_info"`
	LinuxDist      string         `json:"linux_dist"`
	GPUInfo        GPUInfo        `json:"gpu_info"`
	GPUTotal       int            `json:"gpu_total"`
	GPUAllocatable int            `json:"gpu_allocatable"`
	NetworkInfo    NetworkInfo    `json:"network_info"`
	GPUState       []GPUStateInfo `json:"gpu_state"`
	KernelVersion  string         `json:"kernel_version"`
	DiskInfo       DiskInfo       `json:"disk_info"`
	Name           string         `json:"name"`
	MemInfo        MemInfo        `json:"mem_info"`
	Arch           string         `json:"arch"`
	Status         string         `json:"status"`
}

type GPUSummary struct {
	Allocatable int    `json:"allocatable"`
	Total       int    `json:"total"`
	Prod        string `json:"prod"`
	Vendor      string `json:"vendor"`
}

type ResourceInfo struct {
	GPUSummaries   []GPUSummary `json:"gpu_summaries"`
	CPODVersion    string       `json:"cpod_version"`
	Nodes          []NodeInfo   `json:"nodes"`
	CPODID         string       `json:"cpod_id"`
	CachedModels   []string     `json:"cached_models,optional"`
	CachedDatasets []string     `json:"cached_datasets,optional"`
	CachedImages   []string     `json:"cached_images,optional"`
}

type JobStatus struct {
	JobStatus string `json:"job_status"`
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	JobType   string `json:"jobtype"`
}

type CPODStatusReq struct {
	JobStatus    []JobStatus  `json:"job_status"`
	ResourceInfo ResourceInfo `json:"resource_info"`
	UpdateTime   string       `json:"update_time"`
	CPODID       string       `json:"cpod_id"`
	UserID       int64        `header:"Sx-User"`
}

type CPODStatusResp struct {
	Message string `json:"message"`
}

type ModelUrlReq struct {
	DownloadUrls []string `json:"download_urls"`
	JobName      string   `json:"job_name"`
}

type ModelUrlResp struct {
	Message string `json:"message"`
}

type GPUTypeReq struct {
}

type GPUTypeResp struct {
	Amount  float64 `json:"amount"`
	GPUProd string  `json:"gpuProd"`
}

type JobStatusReq struct {
	JobId string `json:"job_id"`
}

type JobStatusResp struct {
	URL    string `json:"url"`
	Status string `json:"status"`
}

type JobDeleteReq struct {
	JobId string `json:"job_id"`
}

type JobDeleteResp struct {
	Message string `json:"message"`
}

type JobCreateReq struct {
	GpuNumber           int64             `json:"gpuNumber"`
	GpuType             string            `json:"gpuType"`
	CkptPath            string            `json:"ckptPath"`
	CkptVol             string            `json:"ckptVol"`
	ModelPath           string            `json:"modelPath"`
	ModelVol            string            `json:"modelVol"`
	ImagePath           string            `json:"imagePath"`
	JobType             string            `json:"jobType"`
	StopType            string            `json:"stopType"`
	StopTime            int64             `json:"stopTime"`
	PretrainedModelName string            `json:"pretrainedModelName"`
	PretrainedModelPath string            `json:"pretrainedModelPath"`
	DatasetName         string            `json:"datasetName"`
	DatasetPath         string            `json:"datasetPath"`
	RunCommand          string            `json:"runCommand"`
	CallbackUrl         string            `json:"callbackUrl,optional,omitempty"`
	Env                 map[string]string `json:"env,omitempty"`
	UserID              int64             `header:"Sx-User" json:"-"`
}

type JobCreateResp struct {
	JobId string `json:"job_id"`
}

type JobCallBackReq struct {
	Status string `json:"status"`
	URL    string `json:"url"`
	JobID  string `json:"jobId"`
}
