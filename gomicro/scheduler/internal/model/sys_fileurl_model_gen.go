// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysFileurlFieldNames          = builder.RawFieldNames(&SysFileurl{})
	sysFileurlRows                = strings.Join(sysFileurlFieldNames, ",")
	sysFileurlRowsExpectAutoSet   = strings.Join(stringx.Remove(sysFileurlFieldNames, "`file_id`", "`[create_at]`"), ",")
	sysFileurlRowsWithPlaceHolder = strings.Join(stringx.Remove(sysFileurlFieldNames, "`file_id`", "`[create_at]`"), "=?,") + "=?"
)

type (
	sysFileurlModel interface {
		Insert(ctx context.Context, data *SysFileurl) (sql.Result, error)
		FindOne(ctx context.Context, fileId int64) (*SysFileurl, error)
		Update(ctx context.Context, data *SysFileurl) error
		Delete(ctx context.Context, fileId int64) error
	}

	defaultSysFileurlModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysFileurl struct {
		FileId     int64          `db:"file_id"`     // ID
		JobName    string         `db:"job_name"`    // job 名称
		FileUrl    sql.NullString `db:"file_url"`    // 文件链接
		CreateTime sql.NullTime   `db:"create_time"` // 创建日期
		UpdateTime sql.NullTime   `db:"update_time"` // 更新时间
	}
)

func newSysFileurlModel(conn sqlx.SqlConn) *defaultSysFileurlModel {
	return &defaultSysFileurlModel{
		conn:  conn,
		table: "`sys_fileurl`",
	}
}

func (m *defaultSysFileurlModel) Delete(ctx context.Context, fileId int64) error {
	query := fmt.Sprintf("delete from %s where `file_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, fileId)
	return err
}

func (m *defaultSysFileurlModel) FindOne(ctx context.Context, fileId int64) (*SysFileurl, error) {
	query := fmt.Sprintf("select %s from %s where `file_id` = ? limit 1", sysFileurlRows, m.table)
	var resp SysFileurl
	err := m.conn.QueryRowCtx(ctx, &resp, query, fileId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysFileurlModel) Insert(ctx context.Context, data *SysFileurl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, sysFileurlRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.JobName, data.FileUrl, data.CreateTime, data.UpdateTime)
	return ret, err
}

func (m *defaultSysFileurlModel) Update(ctx context.Context, data *SysFileurl) error {
	query := fmt.Sprintf("update %s set %s where `file_id` = ?", m.table, sysFileurlRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.JobName, data.FileUrl, data.CreateTime, data.UpdateTime, data.FileId)
	return err
}

func (m *defaultSysFileurlModel) tableName() string {
	return m.table
}
