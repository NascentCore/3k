syntax = "v1"

info(
	title: "调度器服务"
	desc: "调度器服务的接口定义"
	author: "chenshu"
	date: "2023 年 12 月 11 日"
	version: "v1"
)

import "client.api"

type GPUStateInfo {
	Temp      int    `json:"temp"`
	MemUsage  int    `json:"mem_usage"`
	GPUUsage  int    `json:"gpu_usage"`
	Power     int    `json:"power"`
	Status    string `json:"status"`
	Allocated bool   `json:"allocated"`
}

type GPUInfo {
	CUDA    string `json:"cuda"`
	Prod    string `json:"prod"`
	Driver  string `json:"driver"`
	Vendor  string `json:"vendor"`
	MemSize int    `json:"mem_size"`
	Status  string `json:"status"`
}

type CPUInfo {
	Cores int `json:"cores"`
	Usage int `json:"usage"`
}

type NetworkInfo {
	Throughput int    `json:"throughput"`
	Type       string `json:"type"`
}

type DiskInfo {
	Size  int `json:"size"`
	Usage int `json:"usage"`
}

type MemInfo {
	Size  int `json:"size"`
	Usage int `json:"usage"`
}

type NodeInfo {
	CPUInfo        CPUInfo        `json:"cpu_info"`
	LinuxDist      string         `json:"linux_dist"`
	GPUInfo        GPUInfo        `json:"gpu_info"`
	GPUTotal       int            `json:"gpu_total"`
	GPUAllocatable int            `json:"gpu_allocatable"`
	NetworkInfo    NetworkInfo    `json:"network_info"`
	GPUState       []GPUStateInfo `json:"gpu_state"`
	KernelVersion  string         `json:"kernel_version"`
	DiskInfo       DiskInfo       `json:"disk_info"`
	Name           string         `json:"name"`
	MemInfo        MemInfo        `json:"mem_info"`
	Arch           string         `json:"arch"`
	Status         string         `json:"status"`
}

type GPUSummary {
	Allocatable int    `json:"allocatable"`
	Total       int    `json:"total"`
	Prod        string `json:"prod"`
	Vendor      string `json:"vendor"`
}

type ResourceInfo {
	GPUSummaries   []GPUSummary `json:"gpu_summaries"`
	CPODVersion    string       `json:"cpod_version"`
	Nodes          []NodeInfo   `json:"nodes"`
	CPODID         string       `json:"cpod_id"`
	CachedModels   []string     `json:"cached_models,optional"`
	CachedDatasets []string     `json:"cached_datasets,optional"`
	CachedImages   []string     `json:"cached_images,optional"`
}

type JobStatus {
	JobStatus string `json:"job_status"`
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	JobType   string `json:"jobtype"`
}

type (
	CPODStatusReq {
		JobStatus    []JobStatus  `json:"job_status"`
		ResourceInfo ResourceInfo `json:"resource_info"`
		UpdateTime   string       `json:"update_time"`
		CPODID       string       `json:"cpod_id"`
		UserID       int64        `header:"Sx-User"`
	}

	CPODStatusResp {
		Message string `json:"message"`
	}
)

type (
	ModelUrlReq {
		DownloadUrls []string `json:"download_urls"`
		JobName      string   `json:"job_name"`
	}

	ModelUrlResp {
		Message string `json:"message"`
	}
)

type (
	GPUTypeReq {
	}

	GPUTypeResp {
		Amount  float64 `json:"amount"`
		GPUProd string  `json:"gpuProd"`
	}
)

type (
	JobStatusReq {
		JobId string `json:"job_id"`
	}

	JobStatusResp {
		URL    string `json:"url"`
		Status string `json:"status"`
	}
)

type (
	JobStopReq {
		JobId string `json:"job_id"`
	}

	JobStopResp {
		Message string `json:"message"`
	}
)

type (
	JobCreateReq {
		GpuNumber           int64             `json:"gpuNumber"`
		GpuType             string            `json:"gpuType"`
		CkptPath            string            `json:"ckptPath"`
		CkptVol             string            `json:"ckptVol"`
		ModelPath           string            `json:"modelPath"`
		ModelVol            string            `json:"modelVol"`
		ImagePath           string            `json:"imagePath"`
		JobType             string            `json:"jobType"`
		StopType            string            `json:"stopType"`
		StopTime            int64             `json:"stopTime,optional"`
		PretrainedModelName string            `json:"pretrainedModelName,optional"`
		PretrainedModelPath string            `json:"pretrainedModelPath,optional"`
		DatasetName         string            `json:"datasetName,optional"`
		DatasetPath         string            `json:"datasetPath,optional"`
		RunCommand          string            `json:"runCommand,optional"`
		CallbackUrl         string            `json:"callbackUrl,optional,omitempty"`
		Env                 map[string]string `json:"env,optional,omitempty"`
		UserID              int64             `header:"Sx-User" json:"-"`
	}

	JobCreateResp {
		JobId string `json:"job_id"`
	}
)

type (
	JobGetReq {
		Current int   `form:"current"`
		Size    int   `form:"size"`
		UserID  int64 `header:"Sx-User"`
	}

	Job {
		CkptPath            string `json:"ckptPath"`
		CkptVol             string `json:"ckptVol"`
		CpodId              string `json:"cpodId"`
		CreateTime          string `json:"createTime"`
		DatasetName         string `json:"datasetName,omitempty"`
		DatasetPath         string `json:"datasetPath,omitempty"`
		Deleted             int    `json:"deleted"`
		GpuNumber           int    `json:"gpuNumber"`
		GpuType             string `json:"gpuType"`
		ImagePath           string `json:"imagePath"`
		JobId               int    `json:"jobId"`
		JobName             string `json:"jobName"`
		JobType             string `json:"jobType"`
		JsonAll             string `json:"jsonAll"`
		ModelPath           string `json:"modelPath"`
		ModelVol            string `json:"modelVol"`
		ObtainStatus        int    `json:"obtainStatus"`
		PretrainedModelName string `json:"pretrainedModelName,omitempty"`
		PretrainedModelPath string `json:"pretrainedModelPath,omitempty"`
		RunCommand          string `json:"runCommand,omitempty"`
		StopTime            int    `json:"stopTime"`
		StopType            int    `json:"stopType"`
		UpdateTime          string `json:"updateTime"`
		UserId              int    `json:"userId"`
		WorkStatus          int    `json:"workStatus"`
	}

	JobGetResp {
		Content       []Job `json:"content"`
		TotalElements int64 `json:"totalElements"`
	}
)

service scheduler-api {
	@handler CpodStatusHandler
	post /cpod/status (CPODStatusReq) returns (CPODStatusResp)

	@handler UploadStatusHandler
	post /info/upload_status (ModelUrlReq) returns (ModelUrlResp)

	@handler GpuTypeHandler
	get /cpod/gpu_type (GPUTypeReq) returns ([]GPUTypeResp)

	@handler JobStatusHandler
	post /job/status (JobStatusReq) returns (JobStatusResp)

	@handler JobStopHandler
	post /job/stop (JobStopReq) returns (JobStopResp)

	@handler JobCreateHandler
	post /job/job (JobCreateReq) returns (JobCreateResp)

	@handler JobGetHandler
	get /job/job (JobGetReq) returns (JobGetResp)
}