// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysJupyterlabFieldNames          = builder.RawFieldNames(&SysJupyterlab{})
	sysJupyterlabRows                = strings.Join(sysJupyterlabFieldNames, ",")
	sysJupyterlabRowsExpectAutoSet   = strings.Join(stringx.Remove(sysJupyterlabFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysJupyterlabRowsWithPlaceHolder = strings.Join(stringx.Remove(sysJupyterlabFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysJupyterlabModel interface {
		Insert(ctx context.Context, data *SysJupyterlab) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysJupyterlab, error)
		FindOneByJobName(ctx context.Context, jobName string) (*SysJupyterlab, error)
		Update(ctx context.Context, data *SysJupyterlab) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysJupyterlabModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysJupyterlab struct {
		Id             int64        `db:"id"`               // 自增ID
		JobName        string       `db:"job_name"`         // 实例ID
		UserId         int64        `db:"user_id"`          // 用户ID
		NewUserId      string       `db:"new_user_id"`      // 用户ID
		CpodId         string       `db:"cpod_id"`          // cpod id
		Status         int64        `db:"status"`           // 状态：0等待分配、1创建中、2运行中、3终止、4失败
		BillingStatus  int64        `db:"billing_status"`   // 账单状态（0 未结清、1 已结清）
		InstanceName   string       `db:"instance_name"`    // 实例名称
		GpuCount       int64        `db:"gpu_count"`        // GPU数量
		GpuProd        string       `db:"gpu_prod"`         // GPU型号
		CpuCount       int64        `db:"cpu_count"`        // cpu数量
		MemCount       int64        `db:"mem_count"`        // 内存 单位：字节
		DataVolumeSize int64        `db:"data_volume_size"` // 数据卷 单位：字节
		ModelId        string       `db:"model_id"`         // 挂载模型的id
		ModelName      string       `db:"model_name"`       // 挂载模型的名字
		ModelPath      string       `db:"model_path"`       // 模型挂载路径
		Resource       string       `db:"resource"`         // 挂载的资源
		Replicas       int64        `db:"replicas"`         // 副本数：0关闭、1运行
		Url            string       `db:"url"`              // URL
		StartTime      sql.NullTime `db:"start_time"`       // 推理服务启动时间
		EndTime        sql.NullTime `db:"end_time"`         // 推理服务终止时间
		CreatedAt      time.Time    `db:"created_at"`       // 创建时间
		UpdatedAt      time.Time    `db:"updated_at"`       // 更新时间
	}
)

func newSysJupyterlabModel(conn sqlx.SqlConn) *defaultSysJupyterlabModel {
	return &defaultSysJupyterlabModel{
		conn:  conn,
		table: "`sys_jupyterlab`",
	}
}

func (m *defaultSysJupyterlabModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysJupyterlabModel) FindOne(ctx context.Context, id int64) (*SysJupyterlab, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysJupyterlabRows, m.table)
	var resp SysJupyterlab
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysJupyterlabModel) FindOneByJobName(ctx context.Context, jobName string) (*SysJupyterlab, error) {
	var resp SysJupyterlab
	query := fmt.Sprintf("select %s from %s where `job_name` = ? limit 1", sysJupyterlabRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, jobName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysJupyterlabModel) Insert(ctx context.Context, data *SysJupyterlab) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysJupyterlabRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.JobName, data.UserId, data.NewUserId, data.CpodId, data.Status, data.BillingStatus, data.InstanceName, data.GpuCount, data.GpuProd, data.CpuCount, data.MemCount, data.DataVolumeSize, data.ModelId, data.ModelName, data.ModelPath, data.Resource, data.Replicas, data.Url, data.StartTime, data.EndTime)
	return ret, err
}

func (m *defaultSysJupyterlabModel) Update(ctx context.Context, newData *SysJupyterlab) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysJupyterlabRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.JobName, newData.UserId, newData.NewUserId, newData.CpodId, newData.Status, newData.BillingStatus, newData.InstanceName, newData.GpuCount, newData.GpuProd, newData.CpuCount, newData.MemCount, newData.DataVolumeSize, newData.ModelId, newData.ModelName, newData.ModelPath, newData.Resource, newData.Replicas, newData.Url, newData.StartTime, newData.EndTime, newData.Id)
	return err
}

func (m *defaultSysJupyterlabModel) tableName() string {
	return m.table
}
