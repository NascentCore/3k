// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysCpodMainFieldNames          = builder.RawFieldNames(&SysCpodMain{})
	sysCpodMainRows                = strings.Join(sysCpodMainFieldNames, ",")
	sysCpodMainRowsExpectAutoSet   = strings.Join(stringx.Remove(sysCpodMainFieldNames, "`main_id`", "`create_at`", "`created_at`", "`update_at`", "`updated_at`"), ",")
	sysCpodMainRowsWithPlaceHolder = strings.Join(stringx.Remove(sysCpodMainFieldNames, "`main_id`", "`create_at`", "`created_at`", "`update_at`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysCpodMainModel interface {
		Insert(ctx context.Context, data *SysCpodMain) (sql.Result, error)
		FindOne(ctx context.Context, mainId int64) (*SysCpodMain, error)
		Update(ctx context.Context, data *SysCpodMain) error
		Delete(ctx context.Context, mainId int64) error
	}

	defaultSysCpodMainModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysCpodMain struct {
		MainId         int64          `db:"main_id"`         // ID
		CpodId         sql.NullString `db:"cpod_id"`         // cpod id
		CpodVersion    sql.NullString `db:"cpod_version"`    // pod 版本
		GpuVendor      sql.NullString `db:"gpu_vendor"`      // gpu vendor
		GpuProd        sql.NullString `db:"gpu_prod"`        // GPU型号
		GpuMem         sql.NullInt64  `db:"gpu_mem"`         // GPU显存(MB)
		GpuTotal       sql.NullInt64  `db:"gpu_total"`       // GPU总数量
		GpuAllocatable sql.NullInt64  `db:"gpu_allocatable"` // GPU可分配数量
		CreateTime     sql.NullTime   `db:"create_time"`     // 创建日期
		UpdateTime     sql.NullTime   `db:"update_time"`     // 更新时间
		UserId         sql.NullString `db:"user_id"`         // 算力源注册ID
	}
)

func newSysCpodMainModel(conn sqlx.SqlConn) *defaultSysCpodMainModel {
	return &defaultSysCpodMainModel{
		conn:  conn,
		table: "`sys_cpod_main`",
	}
}

func (m *defaultSysCpodMainModel) Delete(ctx context.Context, mainId int64) error {
	query := fmt.Sprintf("delete from %s where `main_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, mainId)
	return err
}

func (m *defaultSysCpodMainModel) FindOne(ctx context.Context, mainId int64) (*SysCpodMain, error) {
	query := fmt.Sprintf("select %s from %s where `main_id` = ? limit 1", sysCpodMainRows, m.table)
	var resp SysCpodMain
	err := m.conn.QueryRowCtx(ctx, &resp, query, mainId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysCpodMainModel) Insert(ctx context.Context, data *SysCpodMain) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysCpodMainRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CpodId, data.CpodVersion, data.GpuVendor, data.GpuProd, data.GpuMem, data.GpuTotal, data.GpuAllocatable, data.CreateTime, data.UpdateTime, data.UserId)
	return ret, err
}

func (m *defaultSysCpodMainModel) Update(ctx context.Context, data *SysCpodMain) error {
	query := fmt.Sprintf("update %s set %s where `main_id` = ?", m.table, sysCpodMainRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CpodId, data.CpodVersion, data.GpuVendor, data.GpuProd, data.GpuMem, data.GpuTotal, data.GpuAllocatable, data.CreateTime, data.UpdateTime, data.UserId, data.MainId)
	return err
}

func (m *defaultSysCpodMainModel) tableName() string {
	return m.table
}
