// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysAppFieldNames          = builder.RawFieldNames(&SysApp{})
	sysAppRows                = strings.Join(sysAppFieldNames, ",")
	sysAppRowsExpectAutoSet   = strings.Join(stringx.Remove(sysAppFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysAppRowsWithPlaceHolder = strings.Join(stringx.Remove(sysAppFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysAppModel interface {
		Insert(ctx context.Context, data *SysApp) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysApp, error)
		Update(ctx context.Context, data *SysApp) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysAppModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysApp struct {
		Id        int64     `db:"id"`         // 自增ID
		AppId     string    `db:"app_id"`     // 应用ID
		AppName   string    `db:"app_name"`   // 应用名字
		UserId    string    `db:"user_id"`    // 提交人
		Desc      string    `db:"desc"`       // 应用介绍
		Crd       string    `db:"crd"`        // CRD
		Status    int64     `db:"status"`     // 状态：0等审核、1审核通过、2被驳回
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newSysAppModel(conn sqlx.SqlConn) *defaultSysAppModel {
	return &defaultSysAppModel{
		conn:  conn,
		table: "`sys_app`",
	}
}

func (m *defaultSysAppModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysAppModel) FindOne(ctx context.Context, id int64) (*SysApp, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysAppRows, m.table)
	var resp SysApp
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysAppModel) Insert(ctx context.Context, data *SysApp) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, sysAppRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AppId, data.AppName, data.UserId, data.Desc, data.Crd, data.Status)
	return ret, err
}

func (m *defaultSysAppModel) Update(ctx context.Context, data *SysApp) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysAppRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AppId, data.AppName, data.UserId, data.Desc, data.Crd, data.Status, data.Id)
	return err
}

func (m *defaultSysAppModel) tableName() string {
	return m.table
}
