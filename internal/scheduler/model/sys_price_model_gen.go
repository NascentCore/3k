// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysPriceFieldNames          = builder.RawFieldNames(&SysPrice{})
	sysPriceRows                = strings.Join(sysPriceFieldNames, ",")
	sysPriceRowsExpectAutoSet   = strings.Join(stringx.Remove(sysPriceFieldNames, "`price_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysPriceRowsWithPlaceHolder = strings.Join(stringx.Remove(sysPriceFieldNames, "`price_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysPriceModel interface {
		Insert(ctx context.Context, data *SysPrice) (sql.Result, error)
		FindOne(ctx context.Context, priceId int64) (*SysPrice, error)
		Update(ctx context.Context, data *SysPrice) error
		Delete(ctx context.Context, priceId int64) error
	}

	defaultSysPriceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysPrice struct {
		PriceId    int64           `db:"price_id"`    // ID
		GpuProd    sql.NullString  `db:"gpu_prod"`    // GPU型号
		Amount     sql.NullFloat64 `db:"amount"`      // 基础价格/min/个
		CreateTime sql.NullTime    `db:"create_time"` // 创建日期
	}
)

func newSysPriceModel(conn sqlx.SqlConn) *defaultSysPriceModel {
	return &defaultSysPriceModel{
		conn:  conn,
		table: "`sys_price`",
	}
}

func (m *defaultSysPriceModel) Delete(ctx context.Context, priceId int64) error {
	query := fmt.Sprintf("delete from %s where `price_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, priceId)
	return err
}

func (m *defaultSysPriceModel) FindOne(ctx context.Context, priceId int64) (*SysPrice, error) {
	query := fmt.Sprintf("select %s from %s where `price_id` = ? limit 1", sysPriceRows, m.table)
	var resp SysPrice
	err := m.conn.QueryRowCtx(ctx, &resp, query, priceId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysPriceModel) Insert(ctx context.Context, data *SysPrice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, sysPriceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GpuProd, data.Amount)
	return ret, err
}

func (m *defaultSysPriceModel) Update(ctx context.Context, data *SysPrice) error {
	query := fmt.Sprintf("update %s set %s where `price_id` = ?", m.table, sysPriceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.GpuProd, data.Amount, data.PriceId)
	return err
}

func (m *defaultSysPriceModel) tableName() string {
	return m.table
}
