// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	verifyCodeFieldNames          = builder.RawFieldNames(&VerifyCode{})
	verifyCodeRows                = strings.Join(verifyCodeFieldNames, ",")
	verifyCodeRowsExpectAutoSet   = strings.Join(stringx.Remove(verifyCodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	verifyCodeRowsWithPlaceHolder = strings.Join(stringx.Remove(verifyCodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	verifyCodeModel interface {
		Insert(ctx context.Context, data *VerifyCode) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*VerifyCode, error)
		FindOneByVerifyKey(ctx context.Context, verifyKey string) (*VerifyCode, error)
		Update(ctx context.Context, data *VerifyCode) error
		Delete(ctx context.Context, id int64) error
	}

	defaultVerifyCodeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	VerifyCode struct {
		Id        int64     `db:"id"` // 自增ID
		VerifyKey string    `db:"verify_key"`
		Code      string    `db:"code"`       // 验证码
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newVerifyCodeModel(conn sqlx.SqlConn) *defaultVerifyCodeModel {
	return &defaultVerifyCodeModel{
		conn:  conn,
		table: "`verify_code`",
	}
}

func (m *defaultVerifyCodeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultVerifyCodeModel) FindOne(ctx context.Context, id int64) (*VerifyCode, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", verifyCodeRows, m.table)
	var resp VerifyCode
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVerifyCodeModel) FindOneByVerifyKey(ctx context.Context, verifyKey string) (*VerifyCode, error) {
	var resp VerifyCode
	query := fmt.Sprintf("select %s from %s where `verify_key` = ? limit 1", verifyCodeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, verifyKey)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVerifyCodeModel) Insert(ctx context.Context, data *VerifyCode) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, verifyCodeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.VerifyKey, data.Code)
	return ret, err
}

func (m *defaultVerifyCodeModel) Update(ctx context.Context, newData *VerifyCode) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, verifyCodeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.VerifyKey, newData.Code, newData.Id)
	return err
}

func (m *defaultVerifyCodeModel) tableName() string {
	return m.table
}
