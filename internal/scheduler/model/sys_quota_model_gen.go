// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysQuotaFieldNames          = builder.RawFieldNames(&SysQuota{})
	sysQuotaRows                = strings.Join(sysQuotaFieldNames, ",")
	sysQuotaRowsExpectAutoSet   = strings.Join(stringx.Remove(sysQuotaFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysQuotaRowsWithPlaceHolder = strings.Join(stringx.Remove(sysQuotaFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysQuotaModel interface {
		Insert(ctx context.Context, data *SysQuota) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysQuota, error)
		Update(ctx context.Context, data *SysQuota) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysQuotaModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysQuota struct {
		Id        int64     `db:"id"`          // 自增ID
		UserId    int64     `db:"user_id"`     // 用户ID
		NewUserId string    `db:"new_user_id"` // 用户ID
		Resource  string    `db:"resource"`    // 资源类型
		Quota     int64     `db:"quota"`       // 资源配额
		CreatedAt time.Time `db:"created_at"`  // 创建时间
		UpdatedAt time.Time `db:"updated_at"`  // 更新时间
	}
)

func newSysQuotaModel(conn sqlx.SqlConn) *defaultSysQuotaModel {
	return &defaultSysQuotaModel{
		conn:  conn,
		table: "`sys_quota`",
	}
}

func (m *defaultSysQuotaModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysQuotaModel) FindOne(ctx context.Context, id int64) (*SysQuota, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysQuotaRows, m.table)
	var resp SysQuota
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysQuotaModel) Insert(ctx context.Context, data *SysQuota) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, sysQuotaRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.NewUserId, data.Resource, data.Quota)
	return ret, err
}

func (m *defaultSysQuotaModel) Update(ctx context.Context, data *SysQuota) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysQuotaRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.NewUserId, data.Resource, data.Quota, data.Id)
	return err
}

func (m *defaultSysQuotaModel) tableName() string {
	return m.table
}
