// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysCpodNodeFieldNames          = builder.RawFieldNames(&SysCpodNode{})
	sysCpodNodeRows                = strings.Join(sysCpodNodeFieldNames, ",")
	sysCpodNodeRowsExpectAutoSet   = strings.Join(stringx.Remove(sysCpodNodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysCpodNodeRowsWithPlaceHolder = strings.Join(stringx.Remove(sysCpodNodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysCpodNodeModel interface {
		Insert(ctx context.Context, data *SysCpodNode) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysCpodNode, error)
		Update(ctx context.Context, data *SysCpodNode) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysCpodNodeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysCpodNode struct {
		Id             int64        `db:"id"`              // id
		CpodId         string       `db:"cpod_id"`         // cpod id
		CpodVersion    string       `db:"cpod_version"`    // pod 版本
		CpodName       string       `db:"cpod_name"`       // 集群名称
		UserId         string       `db:"user_id"`         // 算力源注册ID
		NodeName       string       `db:"node_name"`       // node名字
		GpuVendor      string       `db:"gpu_vendor"`      // gpu vendor
		GpuProd        string       `db:"gpu_prod"`        // GPU型号
		GpuMem         int64        `db:"gpu_mem"`         // GPU显存(bytes)
		GpuTotal       int64        `db:"gpu_total"`       // GPU总数量
		GpuAllocatable int64        `db:"gpu_allocatable"` // GPU可分配数量
		CpuTotal       int64        `db:"cpu_total"`       // CPU总数
		CpuAllocatable int64        `db:"cpu_allocatable"` // CPU可分配数量
		MemTotal       int64        `db:"mem_total"`       // 内存总量(bytes)
		MemAllocatable int64        `db:"mem_allocatable"` // 内存可分配(bytes)
		CreatedAt      time.Time    `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time    `db:"updated_at"`      // 更新时间
		DeletedAt      sql.NullTime `db:"deleted_at"`      // 删除时间
	}
)

func newSysCpodNodeModel(conn sqlx.SqlConn) *defaultSysCpodNodeModel {
	return &defaultSysCpodNodeModel{
		conn:  conn,
		table: "`sys_cpod_node`",
	}
}

func (m *defaultSysCpodNodeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysCpodNodeModel) FindOne(ctx context.Context, id int64) (*SysCpodNode, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysCpodNodeRows, m.table)
	var resp SysCpodNode
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysCpodNodeModel) Insert(ctx context.Context, data *SysCpodNode) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysCpodNodeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CpodId, data.CpodVersion, data.CpodName, data.UserId, data.NodeName, data.GpuVendor, data.GpuProd, data.GpuMem, data.GpuTotal, data.GpuAllocatable, data.CpuTotal, data.CpuAllocatable, data.MemTotal, data.MemAllocatable, data.DeletedAt)
	return ret, err
}

func (m *defaultSysCpodNodeModel) Update(ctx context.Context, data *SysCpodNode) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysCpodNodeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CpodId, data.CpodVersion, data.CpodName, data.UserId, data.NodeName, data.GpuVendor, data.GpuProd, data.GpuMem, data.GpuTotal, data.GpuAllocatable, data.CpuTotal, data.CpuAllocatable, data.MemTotal, data.MemAllocatable, data.DeletedAt, data.Id)
	return err
}

func (m *defaultSysCpodNodeModel) tableName() string {
	return m.table
}
