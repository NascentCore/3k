// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

const (
	SysUserNormal     = 0
	SysUserAdmin      = 1
	SysUserSuperAdmin = 2
)

const (
	SysUserConsumer = 2
	SysUserSupplier = 3
)

var (
	sysUserFieldNames          = builder.RawFieldNames(&SysUser{})
	sysUserRows                = strings.Join(sysUserFieldNames, ",")
	sysUserRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserFieldNames, "`user_id`", "`create_at`"), ",")
	sysUserRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserFieldNames, "`user_id`", "`create_at`"), "=?,") + "=?"
)

type (
	sysUserModel interface {
		Insert(ctx context.Context, data *SysUser) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*SysUser, error)
		FindOneByEmail(ctx context.Context, email sql.NullString) (*SysUser, error)
		FindOneByUsername(ctx context.Context, username sql.NullString) (*SysUser, error)
		Update(ctx context.Context, data *SysUser) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultSysUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysUser struct {
		UserId       int64          `db:"user_id"`        // ID
		Username     sql.NullString `db:"username"`       // 用户名
		NickName     sql.NullString `db:"nick_name"`      // 昵称
		Gender       sql.NullString `db:"gender"`         // 性别
		Phone        sql.NullString `db:"phone"`          // 手机号码
		Email        sql.NullString `db:"email"`          // 邮箱
		AvatarName   sql.NullString `db:"avatar_name"`    // 头像地址
		AvatarPath   sql.NullString `db:"avatar_path"`    // 头像真实路径
		Password     sql.NullString `db:"password"`       // 密码
		IsAdmin      sql.NullString `db:"is_admin"`       // 是否为admin账号
		Admin        int64          `db:"admin"`          // 管理员标志，0普通用户 1管理员 2超级管理员
		Enabled      sql.NullInt64  `db:"enabled"`        // 状态：1启用、0禁用
		CreateBy     sql.NullString `db:"create_by"`      // 创建者
		UpdateBy     sql.NullString `db:"update_by"`      // 更新者
		PwdResetTime sql.NullTime   `db:"pwd_reset_time"` // 修改密码的时间
		CreateTime   sql.NullTime   `db:"create_time"`    // 创建日期
		UpdateTime   sql.NullTime   `db:"update_time"`    // 更新时间
		UserType     int64          `db:"user_type"`      // 2为算力用户 3为算力源用户
		CompanyName  sql.NullString `db:"company_name"`   // 公司名称
		CompanyPhone sql.NullString `db:"company_phone"`  // 公司联系方式
		CompanyOther sql.NullString `db:"company_other"`  // 公司其他信息
		CompanyId    sql.NullString `db:"company_id"`     // 算力源标签ID
	}
)

func newSysUserModel(conn sqlx.SqlConn) *defaultSysUserModel {
	return &defaultSysUserModel{
		conn:  conn,
		table: "`sys_user`",
	}
}

func (m *defaultSysUserModel) Delete(ctx context.Context, userId int64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultSysUserModel) FindOne(ctx context.Context, userId int64) (*SysUser, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", sysUserRows, m.table)
	var resp SysUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindOneByEmail(ctx context.Context, email sql.NullString) (*SysUser, error) {
	var resp SysUser
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", sysUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindOneByUsername(ctx context.Context, username sql.NullString) (*SysUser, error) {
	var resp SysUser
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", sysUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) Insert(ctx context.Context, data *SysUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.NickName, data.Gender, data.Phone, data.Email, data.AvatarName, data.AvatarPath, data.Password, data.IsAdmin, data.Admin, data.Enabled, data.CreateBy, data.UpdateBy, data.PwdResetTime, data.CreateTime, data.UpdateTime, data.UserType, data.CompanyName, data.CompanyPhone, data.CompanyOther, data.CompanyId)
	return ret, err
}

func (m *defaultSysUserModel) Update(ctx context.Context, newData *SysUser) error {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, sysUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Username, newData.NickName, newData.Gender, newData.Phone, newData.Email, newData.AvatarName, newData.AvatarPath, newData.Password, newData.IsAdmin, newData.Admin, newData.Enabled, newData.CreateBy, newData.UpdateBy, newData.PwdResetTime, newData.CreateTime, newData.UpdateTime, newData.UserType, newData.CompanyName, newData.CompanyPhone, newData.CompanyOther, newData.CompanyId, newData.UserId)
	return err
}

func (m *defaultSysUserModel) tableName() string {
	return m.table
}
