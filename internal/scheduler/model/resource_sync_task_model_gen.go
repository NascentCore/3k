// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	resourceSyncTaskFieldNames          = builder.RawFieldNames(&ResourceSyncTask{})
	resourceSyncTaskRows                = strings.Join(resourceSyncTaskFieldNames, ",")
	resourceSyncTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(resourceSyncTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	resourceSyncTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(resourceSyncTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	resourceSyncTaskModel interface {
		Insert(ctx context.Context, data *ResourceSyncTask) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ResourceSyncTask, error)
		Update(ctx context.Context, data *ResourceSyncTask) error
		Delete(ctx context.Context, id int64) error
	}

	defaultResourceSyncTaskModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ResourceSyncTask struct {
		Id           int64          `db:"id"`            // 自增ID
		ResourceId   string         `db:"resource_id"`   // 资源ID
		ResourceType string         `db:"resource_type"` // 资源类型（如模型、数据集等）
		Source       string         `db:"source"`        // 来源
		Size         int64          `db:"size"`          // 资源体积(字节)
		CreatorId    string         `db:"creator_id"`    // 创建者ID
		ExecutorId   string         `db:"executor_id"`   // 执行者ID
		Status       int64          `db:"status"`        // 状态：0等待下载、1下载中、2下载完成、3下载失败
		ErrInfo      string         `db:"err_info"`      // 错误信息
		Meta         sql.NullString `db:"meta"`          // 资源元信息
		Readme       sql.NullString `db:"readme"`        // 资源README
		StartTime    sql.NullTime   `db:"start_time"`    // 任务开始时间
		EndTime      sql.NullTime   `db:"end_time"`      // 任务结束时间
		CreatedAt    time.Time      `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time      `db:"updated_at"`    // 更新时间
	}
)

func newResourceSyncTaskModel(conn sqlx.SqlConn) *defaultResourceSyncTaskModel {
	return &defaultResourceSyncTaskModel{
		conn:  conn,
		table: "`resource_sync_task`",
	}
}

func (m *defaultResourceSyncTaskModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultResourceSyncTaskModel) FindOne(ctx context.Context, id int64) (*ResourceSyncTask, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", resourceSyncTaskRows, m.table)
	var resp ResourceSyncTask
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourceSyncTaskModel) Insert(ctx context.Context, data *ResourceSyncTask) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, resourceSyncTaskRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ResourceId, data.ResourceType, data.Source, data.Size, data.CreatorId, data.ExecutorId, data.Status, data.ErrInfo, data.Meta, data.Readme, data.StartTime, data.EndTime)
	return ret, err
}

func (m *defaultResourceSyncTaskModel) Update(ctx context.Context, data *ResourceSyncTask) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, resourceSyncTaskRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ResourceId, data.ResourceType, data.Source, data.Size, data.CreatorId, data.ExecutorId, data.Status, data.ErrInfo, data.Meta, data.Readme, data.StartTime, data.EndTime, data.Id)
	return err
}

func (m *defaultResourceSyncTaskModel) tableName() string {
	return m.table
}
