// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysOssResourceFieldNames          = builder.RawFieldNames(&SysOssResource{})
	sysOssResourceRows                = strings.Join(sysOssResourceFieldNames, ",")
	sysOssResourceRowsExpectAutoSet   = strings.Join(stringx.Remove(sysOssResourceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysOssResourceRowsWithPlaceHolder = strings.Join(stringx.Remove(sysOssResourceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysOssResourceModel interface {
		Insert(ctx context.Context, data *SysOssResource) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysOssResource, error)
		FindOneByResourceId(ctx context.Context, resourceId string) (*SysOssResource, error)
		Update(ctx context.Context, data *SysOssResource) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysOssResourceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysOssResource struct {
		Id           int64          `db:"id"`            // 自增ID
		ResourceId   string         `db:"resource_id"`   // 数据id
		ResourceType string         `db:"resource_type"` // 数据类型
		ResourceName string         `db:"resource_name"` // 缓存的数据名字
		ResourceSize int64          `db:"resource_size"` // 资源体积(字节)
		Public       int64          `db:"public"`        // 资源是否公开 1 公共 2 用户私有
		UserId       string         `db:"user_id"`       // 用户ID
		Meta         string         `db:"meta"`          // 扩展元数据
		Readme       sql.NullString `db:"readme"`        // README
		CreatedAt    time.Time      `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time      `db:"updated_at"`    // 更新时间
	}
)

func newSysOssResourceModel(conn sqlx.SqlConn) *defaultSysOssResourceModel {
	return &defaultSysOssResourceModel{
		conn:  conn,
		table: "`sys_oss_resource`",
	}
}

func (m *defaultSysOssResourceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysOssResourceModel) FindOne(ctx context.Context, id int64) (*SysOssResource, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysOssResourceRows, m.table)
	var resp SysOssResource
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysOssResourceModel) FindOneByResourceId(ctx context.Context, resourceId string) (*SysOssResource, error) {
	var resp SysOssResource
	query := fmt.Sprintf("select %s from %s where `resource_id` = ? limit 1", sysOssResourceRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, resourceId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysOssResourceModel) Insert(ctx context.Context, data *SysOssResource) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysOssResourceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ResourceId, data.ResourceType, data.ResourceName, data.ResourceSize, data.Public, data.UserId, data.Meta, data.Readme)
	return ret, err
}

func (m *defaultSysOssResourceModel) Update(ctx context.Context, newData *SysOssResource) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysOssResourceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ResourceId, newData.ResourceType, newData.ResourceName, newData.ResourceSize, newData.Public, newData.UserId, newData.Meta, newData.Readme, newData.Id)
	return err
}

func (m *defaultSysOssResourceModel) tableName() string {
	return m.table
}
