// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysAppJobFieldNames          = builder.RawFieldNames(&SysAppJob{})
	sysAppJobRows                = strings.Join(sysAppJobFieldNames, ",")
	sysAppJobRowsExpectAutoSet   = strings.Join(stringx.Remove(sysAppJobFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysAppJobRowsWithPlaceHolder = strings.Join(stringx.Remove(sysAppJobFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysAppJobModel interface {
		Insert(ctx context.Context, data *SysAppJob) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysAppJob, error)
		FindOneByJobName(ctx context.Context, jobName string) (*SysAppJob, error)
		Update(ctx context.Context, data *SysAppJob) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysAppJobModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysAppJob struct {
		Id            int64        `db:"id"`             // 自增ID
		JobName       string       `db:"job_name"`       // 实例ID
		UserId        string       `db:"user_id"`        // 用户ID
		AppId         string       `db:"app_id"`         // 应用ID
		AppName       string       `db:"app_name"`       // 应用名字
		InstanceName  string       `db:"instance_name"`  // 实例名称
		CpodId        string       `db:"cpod_id"`        // cpod id
		Status        int64        `db:"status"`         // 状态：0等待分配、1创建中、2运行中、3终止、4失败
		BillingStatus int64        `db:"billing_status"` // 账单状态（0 未结清、1 已结清）
		Url           string       `db:"url"`            // URL
		Meta          string       `db:"meta"`           // 元数据
		StartTime     sql.NullTime `db:"start_time"`     // 推理服务启动时间
		EndTime       sql.NullTime `db:"end_time"`       // 推理服务终止时间
		CreatedAt     time.Time    `db:"created_at"`     // 创建时间
		UpdatedAt     time.Time    `db:"updated_at"`     // 更新时间
	}
)

func newSysAppJobModel(conn sqlx.SqlConn) *defaultSysAppJobModel {
	return &defaultSysAppJobModel{
		conn:  conn,
		table: "`sys_app_job`",
	}
}

func (m *defaultSysAppJobModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysAppJobModel) FindOne(ctx context.Context, id int64) (*SysAppJob, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysAppJobRows, m.table)
	var resp SysAppJob
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysAppJobModel) FindOneByJobName(ctx context.Context, jobName string) (*SysAppJob, error) {
	var resp SysAppJob
	query := fmt.Sprintf("select %s from %s where `job_name` = ? limit 1", sysAppJobRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, jobName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysAppJobModel) Insert(ctx context.Context, data *SysAppJob) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysAppJobRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.JobName, data.UserId, data.AppId, data.AppName, data.InstanceName, data.CpodId, data.Status, data.BillingStatus, data.Url, data.Meta, data.StartTime, data.EndTime)
	return ret, err
}

func (m *defaultSysAppJobModel) Update(ctx context.Context, newData *SysAppJob) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysAppJobRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.JobName, newData.UserId, newData.AppId, newData.AppName, newData.InstanceName, newData.CpodId, newData.Status, newData.BillingStatus, newData.Url, newData.Meta, newData.StartTime, newData.EndTime, newData.Id)
	return err
}

func (m *defaultSysAppJobModel) tableName() string {
	return m.table
}
