// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userBillingFieldNames          = builder.RawFieldNames(&UserBilling{})
	userBillingRows                = strings.Join(userBillingFieldNames, ",")
	userBillingRowsExpectAutoSet   = strings.Join(stringx.Remove(userBillingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userBillingRowsWithPlaceHolder = strings.Join(stringx.Remove(userBillingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userBillingModel interface {
		Insert(ctx context.Context, data *UserBilling) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserBilling, error)
		Update(ctx context.Context, data *UserBilling) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserBillingModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserBilling struct {
		Id            int64          `db:"id"`             // ID
		BillingId     string         `db:"billing_id"`     // 账单ID
		UserId        int64          `db:"user_id"`        // 用户ID
		NewUserId     string         `db:"new_user_id"`    // 用户ID
		Amount        float64        `db:"amount"`         // 消费金额
		BillingStatus int64          `db:"billing_status"` // 账单状态（0 未支付、1 已支付、2 欠费）
		JobId         string         `db:"job_id"`         // 关联任务id
		JobType       string         `db:"job_type"`       // 关联任务类型（例如：finetune、inference）
		BillingTime   time.Time      `db:"billing_time"`   // 账单生成时间
		DueTime       sql.NullTime   `db:"due_time"`       // 到期时间
		PaymentTime   sql.NullTime   `db:"payment_time"`   // 支付时间
		Description   sql.NullString `db:"description"`    // 账单描述（可选，详细说明此次费用的具体内容）
		CreatedAt     time.Time      `db:"created_at"`     // 创建时间
		UpdatedAt     time.Time      `db:"updated_at"`     // 更新时间
	}
)

func newUserBillingModel(conn sqlx.SqlConn) *defaultUserBillingModel {
	return &defaultUserBillingModel{
		conn:  conn,
		table: "`user_billing`",
	}
}

func (m *defaultUserBillingModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserBillingModel) FindOne(ctx context.Context, id int64) (*UserBilling, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userBillingRows, m.table)
	var resp UserBilling
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBillingModel) Insert(ctx context.Context, data *UserBilling) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userBillingRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BillingId, data.UserId, data.NewUserId, data.Amount, data.BillingStatus, data.JobId, data.JobType, data.BillingTime, data.DueTime, data.PaymentTime, data.Description)
	return ret, err
}

func (m *defaultUserBillingModel) Update(ctx context.Context, data *UserBilling) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userBillingRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BillingId, data.UserId, data.NewUserId, data.Amount, data.BillingStatus, data.JobId, data.JobType, data.BillingTime, data.DueTime, data.PaymentTime, data.Description, data.Id)
	return err
}

func (m *defaultUserBillingModel) tableName() string {
	return m.table
}
